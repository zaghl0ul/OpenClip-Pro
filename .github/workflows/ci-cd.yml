name: OpenClip Pro CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            node_modules
            backend/venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run Python linting (Black)
        run: |
          cd backend
          source venv/bin/activate
          black --check .

      - name: Run Python linting (Flake8)
        run: |
          cd backend
          source venv/bin/activate
          flake8 . --config=.flake8

      - name: Run Python type checking (mypy)
        run: |
          cd backend
          source venv/bin/activate
          mypy . --config-file=mypy.ini

      - name: TypeScript type checking
        run: npm run type-check

  # Security Scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'OpenClip Pro'
          path: '.'
          format: 'HTML'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        run: npm run test:e2e:${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: openclip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/openclip_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          source venv/bin/activate
          alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/openclip_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          source venv/bin/activate
          pytest tests/unit -v --cov=app --cov-report=xml

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/openclip_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          source venv/bin/activate
          pytest tests/integration -v --cov=app --cov-report=xml --cov-append

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Build Docker Images
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, security, frontend-tests, backend-tests]
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      version: ${{ steps.meta-frontend.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ steps.meta-frontend.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_ENV=production
            BUILD_DATE=${{ steps.meta-backend.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner on images
        run: |
          trivy image ${{ steps.meta-frontend.outputs.tags }}
          trivy image ${{ steps.meta-backend.outputs.tags }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.openclip.pro
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name openclip-staging

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in manifests
          kubectl set image deployment/frontend frontend=${{ needs.build.outputs.frontend-image }} -n staging
          kubectl set image deployment/backend backend=${{ needs.build.outputs.backend-image }} -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/frontend -n staging
          kubectl rollout status deployment/backend -n staging

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --url=https://staging.openclip.pro

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://openclip.pro
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval check
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: lead-dev,cto
          minimum-approvals: 1
          issue-title: "Deploy to Production: ${{ needs.build.outputs.version }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name openclip-production

      - name: Blue-Green Deployment
        run: |
          # Create new deployment (green)
          kubectl apply -f k8s/production/deployment-green.yaml
          
          # Update image
          kubectl set image deployment/frontend-green frontend=${{ needs.build.outputs.frontend-image }} -n production
          kubectl set image deployment/backend-green backend=${{ needs.build.outputs.backend-image }} -n production
          
          # Wait for green deployment
          kubectl rollout status deployment/frontend-green -n production
          kubectl rollout status deployment/backend-green -n production
          
          # Run health checks
          ./scripts/health-check.sh green
          
          # Switch traffic to green
          kubectl patch service frontend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service backend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and monitor
          sleep 300  # 5 minutes
          
          # If successful, remove blue deployment
          kubectl delete deployment frontend-blue backend-blue -n production || true
          
          # Rename green to blue for next deployment
          kubectl patch deployment frontend-green -n production --type=json -p='[{"op": "replace", "path": "/metadata/name", "value": "frontend-blue"}]'
          kubectl patch deployment backend-green -n production --type=json -p='[{"op": "replace", "path": "/metadata/name", "value": "backend-blue"}]'

      - name: Run production tests
        run: |
          npm run test:production -- --url=https://openclip.pro

      - name: Update CDN
        run: |
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Create Release Notes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Release v${{ needs.build.outputs.version }}
          body: |
            ## Changes in this Release
            ${{ github.event.head_commit.message }}
            
            ## Docker Images
            - Frontend: `${{ needs.build.outputs.frontend-image }}`
            - Backend: `${{ needs.build.outputs.backend-image }}`
          draft: false
          prerelease: false

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }} for version ${{ needs.build.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Post-deployment monitoring
  post-deployment:
    name: Post Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://openclip.pro
            https://staging.openclip.pro
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance monitoring
        run: |
          # Check response times
          curl -w "@curl-format.txt" -o /dev/null -s https://openclip.pro/health
          
          # Check error rates in Prometheus
          ./scripts/check-metrics.sh

      - name: Security scan production
        run: |
          # Run OWASP ZAP scan
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t https://openclip.pro -r zap-report.html

      - name: Update status page
        run: |
          # Update status page with deployment info
          curl -X POST https://api.statuspage.io/v1/pages/${{ secrets.STATUSPAGE_ID }}/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident": {
                "name": "Deployment completed",
                "status": "resolved",
                "impact": "none",
                "body": "Successfully deployed version ${{ needs.build.outputs.version }}"
              }
            }'