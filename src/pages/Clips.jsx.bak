import React, { useState, useEffect, useCallback, useMemo } from 'react';
import ReactDOM from 'react-dom';
import {
  Video,
  Play,
  Edit,
  Download,
  Trash2,
  Share2,
  Grid,
  List,
  Search,
  SortAsc,
  SortDesc,
  MoreVertical,
  ClockIcon,
  Eye,
  Star,
  Brain,
  Target,
  Folder,
} from '../components/Common/icons';
import useProjectStore from '../stores/projectStore';
import { useErrorHandler } from '../hooks/useErrorHandler';
import apiClient from '../utils/apiClient';
import toast from 'react-hot-toast';

const Clips = () => {
  const { projects, deleteClip } = useProjectStore();
  const { handleError, withErrorHandling } = useErrorHandler();

  const [clips, setClips] = useState([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState('grid');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('created');
  const [sortOrder, setSortOrder] = useState('desc');
  const [selectedClip, setSelectedClip] = useState(null);
  const [filterBy, setFilterBy] = useState('all');
  const [error, setError] = useState(null);

  const loadClips = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const allClips = [];
      for (const project of projects) {
        if (project.clips && project.clips.length > 0) {
          const projectClips = project.clips.map((clip) => ({
            ...clip,
            projectId: project.id,
            projectName: project.name,
          }));
          allClips.push(...projectClips);
        }
      }

      setClips(allClips);
    } catch (_error) {
      console.error('Failed to load clips:', _error);
      setError(_error.message);
    } finally {
      setLoading(false);
    }
  }, [projects]);

  useEffect(() => {
    loadClips();
  }, [loadClips]);

  // Memoize filtered and sorted clips to prevent unnecessary recalculations
  const filteredAndSortedClips = useMemo(() => {
    let filtered = clips;

    // Filter by search term
    if (searchTerm.trim()) {
      const query = searchTerm.toLowerCase();
      filtered = clips.filter(
        (clip) =>
          clip.name?.toLowerCase().includes(query) ||
          clip.description?.toLowerCase().includes(query) ||
          clip.projectName?.toLowerCase().includes(query)
      );
    }

    // Filter by type
    if (filterBy !== 'all') {
      filtered = filtered.filter((clip) => {
        switch (filterBy) {
          case 'high-score':
            return (clip.score || 0) >= 80;
          case 'recent': {
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            return new Date(clip.createdAt) >= weekAgo;
          }
          default:
            return true;
        }
      });
    }

    // Sort clips
    return filtered.sort((a, b) => {
      let aValue, bValue;

      switch (sortBy) {
        case 'name':
          aValue = a.name?.toLowerCase() || '';
          bValue = b.name?.toLowerCase() || '';
          return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        case 'duration':
          aValue = a.duration || 0;
          bValue = b.duration || 0;
          return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
        case 'score':
          aValue = a.score || 0;
          bValue = b.score || 0;
          return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
        case 'project':
          aValue = a.projectName?.toLowerCase() || '';
          bValue = b.projectName?.toLowerCase() || '';
          return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        case 'created':
        default:
          aValue = new Date(a.createdAt);
          bValue = new Date(b.createdAt);
          return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
      }
    });
  }, [clips, searchTerm, filterBy, sortBy, sortOrder]);

  const formatDuration = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  const handleDeleteClip = withErrorHandling(
    async (clipId, projectId) => {
      if (!window.confirm('Are you sure you want to delete this clip?')) {
        return;
      }
      await apiClient.deleteClip(projectId, clipId);
      setClips((prev) => prev.filter((clip) => clip.id !== clipId));
      await deleteClip(projectId, clipId);
      toast.success('Clip deleted successfully');
      setSelectedClip(null);
    },
    { operation: 'delete_clip' }
  );

  const handleDownloadClip = withErrorHandling(
    async (clip) => {
      await apiClient.downloadFile(
        `/api/projects/${clip.projectId}/clips/${clip.id}/download`,
        `${clip.name || 'clip'}.mp4`
      );
      toast.success('Clip download started');
      setSelectedClip(null);
    },
    { operation: 'download_clip' }
  );

  const handleShareClip = async (clip) => {
    try {
      if (navigator.share) {
        await navigator.share({
          title: clip.name || 'Video Clip',
          text: clip.description || 'Check out this video clip',
          url: window.location.href,
        });
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(window.location.href);
        toast.success('Link copied to clipboard');
      }
      setSelectedClip(null);
    } catch (error) {
      handleError(error, { operation: 'share_clip' });
    }
  };

  const ClipCard = ({ clip }) => (
    <div className="glass-frosted rounded-2xl overflow-hidden hover:scale-[1.02] transition-transform cursor-pointer">
      <div className="relative z-10">
        {/* Clip Thumbnail with Glass Enhancement */}
        <div className="aspect-video glass-frosted glass-button relative group overflow-hidden">
          {clip.video_data?.thumbnail_url || clip.thumbnail ? (
            <img
              src={clip.video_data?.thumbnail_url || clip.thumbnail}
              alt={clip.name}
              className="w-full h-full object-cover"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <VideoIcon size={48} className="w-12 h-12 text-white/40" />
            </div>
          )}

          {/* Play Button Overlay */}
          <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
            <div className="p-4 glass-frosted glass-button rounded-full text-white hover:bg-white/20 transition-colors">
              <div size={24} className="w-6 h-6">
                <PlayIcon size={24} className="w-6 h-6" />
              </div>
            </div>
          </div>

          {/* Duration Badge */}
          <div className="absolute bottom-3 right-3 px-2 py-1 glass-frosted glass-button text-white text-xs rounded-lg">
            {formatDuration(clip.duration)}
          </div>

          {/* Project Badge */}
          <div className="absolute top-3 left-3 px-3 py-1 glass-frosted glass-button text-white text-xs rounded-lg flex items-center gap-1">
            <Folder size={12} className="w-3 h-3" />
            <span>{clip.projectName}</span>
          </div>

          {/* Enhanced Score Badge */}
          {clip.score && (
            <div className="absolute top-3 right-3 px-3 py-1 glass-frosted glass-button text-white text-xs rounded-lg flex items-center gap-1">
              <Star size={12} className="w-3 h-3" />
              {clip.score}
            </div>
          )}

          {/* Enhanced Actions Menu */}
          <div className="absolute top-3 right-3">
            <div className="relative">
              <div className="p-2 glass-frosted glass-button text-white rounded-lg hover:bg-white/20 transition-colors">
                <div size={16} className="w-4 h-4">
                  <MoreVerticalIcon size={16} className="w-4 h-4" />
                </div>
              </div>

              {selectedClip === clip.id &&
                ReactDOM.createPortal(
                  <div className="absolute top-full right-0 mt-2 w-48 glass-frosted rounded-lg p-2 z-[60]">
                    <div className="w-full flex items-center gap-2 px-3 py-2 text-sm text-white rounded-lg hover:bg-white/20 transition-colors">
                      <div size={16} className="w-4 h-4">
                        <EditIcon size={16} className="w-4 h-4" />
                      </div>
                      Edit Clip
                    </div>
                    <div className="w-full flex items-center gap-2 px-3 py-2 text-sm text-white rounded-lg hover:bg-white/20 transition-colors">
                      <div size={16} className="w-4 h-4">
                        <DownloadIcon size={16} className="w-4 h-4" />
                      </div>
                      Download
                    </div>
                    <div className="w-full flex items-center gap-2 px-3 py-2 text-sm text-white rounded-lg hover:bg-white/20 transition-colors">
                      <div size={16} className="w-4 h-4">
                        <ShareIcon size={16} className="w-4 h-4" />
                      </div>
                      Share
                    </div>
                    <div className="w-full flex items-center gap-2 px-3 py-2 text-sm text-red-300 rounded-lg hover:bg-red-500/20 transition-colors">
                      <div size={16} className="w-4 h-4">
                        <TrashIcon size={16} className="w-4 h-4" />
                      </div>
                      Delete
                    </div>
                  </div>,
                  document.body
                )}
            </div>
          </div>
        </div>

        {/* Enhanced Clip Info with Glass Treatment */}
        <div className="p-6">
          <h3 className="font-semibold text-white text-lg mb-1 truncate">
            {clip.name || 'Untitled Clip'}
          </h3>

          <p className="text-sm text-white/60 mb-3">From: {clip.projectName}</p>

          {clip.description && (
            <p className="text-sm text-white/70 mb-4 line-clamp-2">{clip.description}</p>
          )}

          <div className="flex items-center justify-between text-xs text-white/50 mb-4">
            <div className="flex items-center gap-1">
              <ClockIcon size={12} className="w-3 h-3" />
              <span>{formatDate(clip.createdAt)}</span>
            </div>
            <div className="glass-frosted glass-button px-2 py-1 rounded">
              <EyeIcon size={12} className="w-3 h-3 inline mr-1" />
              <span>0 views</span>
            </div>
          </div>

          {/* Enhanced Action Buttons */}
          <div className="flex gap-2">
            <div className="flex-1 glass-frosted glass-button py-2 rounded-lg text-white hover:bg-white/20 transition-colors flex items-center justify-center gap-2">
              <div size={16} className="w-4 h-4">
                <DownloadIcon size={16} className="w-4 h-4" />
              </div>
              Download
            </div>
            <div className="glass-frosted glass-button p-2 rounded-lg text-white hover:bg-white/20 transition-colors">
              <div size={16} className="w-4 h-4">
                <ShareIcon size={16} className="w-4 h-4" />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const ClipListItem = ({ clip }) => (
    <div className="glass-frosted rounded-xl p-6 hover:bg-white/10 transition-all">
      <div className="relative z-10">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-6 flex-1">
            <div className="w-24 h-16 glass-frosted glass-button rounded-lg flex items-center justify-center relative overflow-hidden">
              {clip.thumbnail ? (
                <img src={clip.thumbnail} alt={clip.name} className="w-full h-full object-cover" />
              ) : (
                <VideoIcon size={32} className="w-8 h-8 text-white/40" />
              )}
              {clip.duration && (
                <div className="absolute bottom-0 right-0 px-1 bg-black/70 text-white text-xs rounded-tl">
                  {formatDuration(clip.duration)}
                </div>
              )}
            </div>

            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <h3 className="font-semibold text-white text-lg">{clip.name || 'Untitled Clip'}</h3>
                {clip.score && (
                  <div className="flex items-center gap-1 px-3 py-1 glass-frosted glass-button text-white text-xs rounded-lg">
                    <Star size={12} className="w-3 h-3" />
                    {clip.score}
                  </div>
                )}
              </div>
              <p className="text-sm text-white/60 mb-2">From: {clip.projectName}</p>
              {clip.description && <p className="text-sm text-white/70 mb-3">{clip.description}</p>}
              <div className="text-xs text-white/50">{formatDate(clip.createdAt)}</div>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <div className="p-3 glass-frosted glass-button text-blue-300 hover:bg-blue-500/20 rounded-lg transition-colors">
              <div size={16} className="w-4 h-4">
                <PlayIcon size={16} className="w-4 h-4" />
              </div>
            </div>
            <div className="p-3 glass-frosted glass-button text-white hover:bg-white/20 rounded-lg transition-colors">
              <div size={16} className="w-4 h-4">
                <EditIcon size={16} className="w-4 h-4" />
              </div>
            </div>
            <div className="p-3 glass-frosted glass-button text-white hover:bg-white/20 rounded-lg transition-colors">
              <div size={16} className="w-4 h-4">
                <DownloadIcon size={16} className="w-4 h-4" />
              </div>
            </div>
            <div className="p-3 glass-frosted glass-button text-red-300 hover:bg-red-500/20 rounded-lg transition-colors">
              <div size={16} className="w-4 h-4">
                <TrashIcon size={16} className="w-4 h-4" />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div size={64} className="w-16 h-16 mx-auto mb-4">
            <BrainIcon className="w-full h-full text-indigo-400" />
          </div>
          <p className="text-white/60">Loading clips...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Enhanced Header with Glass */}
      <div className="glass-frosted rounded-2xl p-8">
        <div className="relative z-10">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2 flex items-center gap-3">
                <VideoIcon className="w-10 h-10 text-indigo-300" />
                All Clips
              </h1>
              <p className="text-white/70 text-lg">
                Manage and organize all your AI-analyzed video clips in one place
              </p>
            </div>

            <div className="flex items-center gap-3">
              <Target size={24} className="w-6 h-6 text-purple-400" />
              <span className="text-white/60">AI-Powered</span>
            </div>
          </div>

          {/* Enhanced Controls with Glass */}
          <div className="flex flex-col lg:flex-row lg:items-center gap-4">
            {/* Enhanced Search */}
            <div className="flex-1">
              <div className="relative">
                <SearchIcon size={20} className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/40" />
                <input
                  type="text"
                  placeholder="Search clips..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 glass-frosted glass-button rounded-xl text-white placeholder-white/40 border-0 focus:outline-none focus:ring-2 focus:ring-indigo-400/50 transition-all bg-transparent"
                />
              </div>
            </div>

            {/* Enhanced Filters and Sort */}
            <div className="flex items-center gap-3">
              <select
                value={filterBy}
                onChange={(e) => setFilterBy(e.target.value)}
                className="px-4 py-3 glass-frosted glass-button rounded-xl text-white focus:ring-2 focus:ring-indigo-400/50 focus:outline-none bg-transparent"
              >
                <option value="all">All Clips</option>
                <option value="high-score">High Score (80+)</option>
                <option value="recent">Recent (7 days)</option>
              </select>

              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-4 py-3 glass-frosted glass-button rounded-xl text-white focus:ring-2 focus:ring-indigo-400/50 focus:outline-none bg-transparent"
              >
                <option value="created">Date Created</option>
                <option value="name">Name</option>
                <option value="duration">Duration</option>
                <option value="score">Score</option>
                <option value="project">Project</option>
              </select>

              <div className="p-3 glass-frosted glass-button rounded-xl hover:bg-white/20 transition-colors">
                {sortOrder === 'desc' ? (
                  <div size={20} className="w-5 h-5">
                    <SortDesc size={20} className="w-5 h-5" />
                  </div>
                ) : (
                  <div size={20} className="w-5 h-5">
                    <SortAsc size={20} className="w-5 h-5" />
                  </div>
                )}
              </div>

              <div className="flex glass-frosted glass-button rounded-xl overflow-hidden">
                <div className={`p-3 ${viewMode === 'grid' ? 'bg-indigo-500 text-white' : 'text-white/60'} hover:bg-indigo-500 hover:text-white transition-colors`}>
                  <div size={20} className="w-5 h-5">
                    <Grid size={20} className="w-5 h-5" />
                  </div>
                </div>
                <div className={`p-3 ${viewMode === 'list' ? 'bg-indigo-500 text-white' : 'text-white/60'} hover:bg-indigo-500 hover:text-white transition-colors`}>
                  <div size={20} className="w-5 h-5">
                    <List size={20} className="w-5 h-5" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Stats with Glass */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {[
          { label: 'Total Clips', value: clips.length, icon: Video, color: 'text-blue-300' },
          {
            label: 'Total Duration',
            value: formatDuration(clips.reduce((acc, clip) => acc + (clip.duration || 0), 0)),
            icon: Clock,
            color: 'text-green-300',
          },
          {
            label: 'Avg Score',
            value:
              clips.length > 0
                ? Math.round(clips.reduce((acc, clip) => acc + (clip.score || 0), 0) / clips.length)
                : 0,
            icon: Star,
            color: 'text-yellow-300',
          },
          {
            label: 'Projects',
            value: new Set(clips.map((clip) => clip.projectId)).size,
            icon: Target,
            color: 'text-purple-300',
          },
        ].map((stat, index) => (
          <div
            key={stat.label}
            className="glass-frosted rounded-xl p-6"
          >
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium text-white/60">{stat.label}</h3>
                <stat.icon className={`w-5 h-5 ${stat.color}`} />
              </div>
              <p className="text-3xl font-bold text-white">{stat.value}</p>
            </div>
          </div>
        ))}
      </div>

      {/* Enhanced Clips Grid/List */}
      {filteredAndSortedClips.length === 0 ? (
        <div className="glass-frosted rounded-2xl p-12 text-center">
          <div className="relative z-10">
            <VideoIcon className="w-20 h-20 text-white/40 mx-auto mb-6" />
            <h3 className="text-2xl font-semibold text-white mb-3">
              {searchTerm || filterBy !== 'all' ? 'No clips found' : 'No clips yet'}
            </h3>
            <p className="text-white/60 max-w-md mx-auto">
              {searchTerm || filterBy !== 'all'
                ? "Try adjusting your search or filter criteria to find what you're looking for"
                : 'Create a project and analyze a video with AI to generate clips automatically'}
            </p>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredAndSortedClips.map((clip) => (
            <ClipListItem key={clip.id} clip={clip} />
          ))}
        </div>
      )}
    </div>
  );
};

export default Clips;
